
/*
========================================================================================
  Nextflow config file
========================================================================================
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

// Global default params, used in configs
params {

    // Boilerplate options
    outdir                     = './results'
    tracedir                   = "${params.outdir}/pipeline_info"
    publish_dir_mode           = 'copy'
    
    // Max requirements
    max_memory                 = '128.GB'
    max_cpus                   = 16
    max_time                   = '240.h'
} 

profiles {
    secure_lustre {
        process.executor = 'local'
        
        docker {
        enabled = true
        runOptions = '-u $(id -u):$(id -g)'
        }
        singularity {
            enabled    = false
            autoMounts = false
        }
    }

    local {
        process.executor = 'local'
        
        docker {
        enabled = true
        runOptions = '-u $(id -u):$(id -g)'
        }
        singularity {
            enabled    = false
            autoMounts = false
        }

        process {
            withName: RUN_WHATSHAP {
                cpus = 10
                memory = '14.G'
            }
            withName: FIND_ADJACENT_VARIANTS {
                cpus = 8
                memory = '8.G'
            }
            withName: FIND_MNV_CANDIDATES {
                cpus = 4
                memory = '6.G'
            }
            withName: EXTRACT_BAITSET_VARIANTS {
                cpus = 4
                memory = '6.G'
            }
              withName: COMPOSE_MNV_VARIANTS {
                cpus = 4
                memory = '6.G'
            }
            withLabel: phase {
                cpus = 2
                memory = '8.G'
            }
            withName: ANNOTATE_VARIANTS {
                memory = 40.GB
                cpus = 8
        }
        }}

    }

    farm22 {
        process.executor = 'lsf'
        singularity.runOptions = "--bind /lustre"

        docker {
        enabled = false
        }
        singularity {
            enabled    = true
            autoMounts = true
            cacheDir = '/lustre/scratch125/casm/team113da/singularity_cache/dermatlas'
            }
        executor {
            name = 'lsf'
            perJobMemLimit = true
            poolSize = 4
            submitRateLimit = '5 sec'
            killBatchSize = 50
        }
        params {
            baitset = "/lustre/scratch125/casm/team113da/projects/FUR/FUR_bases/FUR_base_cat/metadata/references/baitset/DNA/S3250994_Feline_HSA_Jan2020_146.bed"
            vep_cache = "/lustre/scratch125/casm/team113da/users/bf14/git/ensembl-vep/cache"
            custom_files = "/lustre/scratch125/casm/team113da/users/bf14/variant_caller_benchmarking/VEP/SRA_99_Lives.snp_indel.filt.54cats.short.alt.no_header.vcf.gz{,.tbi}"
            custom_args = "SRA_99_Lives.snp_indel.filt.54cats.short.alt.no_header.vcf.gz,99_Lives,vcf,exact,0,AF"
            species = "felis_catus"
            db_version = "104"
            assembly = "Felis_catus_9.0"
        }
        process {
            withName: RUN_WHATSHAP {
                container = "quay.io/biocontainers/whatshap:2.3--py39h1f90b4d_0"
                cpus = 10
                memory = '14.G'
            }
            withName: FIND_ADJACENT_VARIANTS {
                cpus = 8
                memory = '8.G'
            }
            withName: FIND_MNV_CANDIDATES {
                cpus = 4
                memory = '6.G'
            }
            withName: EXTRACT_BAITSET_VARIANTS {
                cpus = 4
                memory = '6.G'
            }
              withName: COMPOSE_MNV_VARIANTS {
                cpus = 4
                memory = '6.G'
            }
            withLabel: phase {
                module = "bcftools-1.19/python-3.11.6"
                cpus = 2
                memory = '8.G'
            }
            withName: ANNOTATE_VARIANTS {
                module = "ensembl_vep/103.1:bcftools-1.9/python-3.11.6"
                memory = 40.GB
                cpus = 8
        }

        }
        }
}



def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
tracedir = "pipeline_info"

report {
    enabled = true
    file    = "execution_report_${trace_timestamp}.html"
}


manifest {
    name            = 'justaphase'
    author          = 'Bailey Francis, Jamie Billington'
    homePage        = 'https://gitlab.internal.sanger.ac.uk/DERMATLAS/analysis-methods/justaphase'
    description     = 'Phase variants in a species-agnostic way'
    mainScript      = 'main.nf'
    nextflowVersion = '!>=22.04.3'
    version         = '0.1.3'
    defaultBranch   = 'develop'
}

def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}